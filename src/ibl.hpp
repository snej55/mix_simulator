// IBL implementation
#ifndef IBL_H
#define IBL_H

#include <glm/glm.hpp>
#include "engine_types.hpp"

class IBL : public EngineObject
{
public:
    explicit IBL(EngineObject* parent);
    ~IBL() override;

    // initialize sampler maps
    void init(unsigned int hdrTexture, unsigned int irradianceTexture, unsigned int brdfLutMap, void* engine);

    // render skybox
    void renderCube();

private:
    // we only need environment and irradiance textures
    // prefilter map is autogenerated (due to mipmap levels)
    unsigned int m_hdrTexture{0};
    unsigned int m_irradianceTexture{0};
    unsigned int m_brdfLutMap{0}; // for specular IBL

    // samplers
    unsigned int m_envCubemap{0};
    unsigned int m_irradianceMap{0};
    unsigned int m_prefilterMap{0};

    unsigned int m_cubeVAO{0};
    unsigned int m_cubeVBO{0};

    // generate cube VAO & VBO
    void initCube();
    void free(); // free cube resources
};

#endif
